// template version: 1.0.9
{{- $package := toLower .Table.Name}}
{{- $model := title .Table.Name}}
{{- $storage := pascal (print "Storage")}}
{{- $param := toLower $model}} 

package {{$package}}   
import (
    "context"
    "database/sql"
    "{{.Params.repository}}/internal/storage"
)

// {{$storage}} ,{{.Table.Comment}}
type {{$storage}} struct { 
   q storage.Queryable
}

//rowScanner represent rows object from sql
type rowScanner interface {
	Scan(dest ...interface{}) error
}

//rowScanner represent rows object from sql
type rowsResult interface {
	Next() bool
	Scan(dest ...interface{}) error
}

// NewStorage , Create new Storage.
func NewStorage(q storage.Queryable) *{{$storage}}{ 
    return &{{$storage}}{ 
        q: q,
    }
}
 
{{template "func_single" .}} 
{{template "func_first" .}} 
{{template "func_first_order" .}} 
{{template "func_where" .}} 
{{template "func_where_order" .}} 
{{template "func_where_with_paging" .}} 
{{template "func_where_no_filter" .}} 
{{template "func_find_all" .}} 

{{- if .Table.HasPrimaryKey}} 
{{template "func_find_by_keys" .}} 
{{template "func_find_by_keys_no_filter" .}}
{{template "func_create" .}}
{{template "func_update" .}}
{{template "func_delete" .}}
{{template "func_save" .}} 
{{- end}}

{{- /* FindByKeys function */ -}}
{{- define "func_single"}}
{{- $model := title .Table.Name}}
{{- $storage := pascal (print "Storage")}}  
// Single , find one {{$model}} record matching with condition specified by query and args.
func (s *{{$storage}}) Single(ctx context.Context, query string, args ...interface{}) (*{{$model}}, error) { 
    q := s.pickQueryable(ctx)
    stmt := fmt.Sprintf(`%s WHERE %s LIMIT 2`, selectQuery(), query) 
    rows, err := q.QueryContext(ctx, stmt, args...) 
            
    if err != nil {
        return nil, err
    }
	defer rows.Close()
    
    count := 0  
    var result *{{$model}}
    for rows.Next() { 
        if count > 1 {
            return nil, errors.New("found more than one record")
        }   
        data := &{{$model}}{}
        err := scan(rows, data)
        if err != nil {
            if err == sql.ErrNoRows {
                return nil, nil
            }
            return nil, err
        }
        result = data
        count++
    }
    return result, nil
}
{{- end}}

{{- /* First function */ -}}
{{- define "func_first"}}
{{- $model := title .Table.Name}}
{{- $storage := pascal (print "Storage")}}  
// First , find first {{$model}} record matching with condition specified by query and args.
func (s *{{$storage}}) First(ctx context.Context, query string, args ...interface{}) (*{{$model}}, error) {   
    q := s.pickQueryable(ctx)
    stmt := fmt.Sprintf(`%s WHERE %s LIMIT 1`, selectQuery(), query) 
    row := q.QueryRowContext(ctx, stmt, args...) 

    data := &{{$model}}{}       
    err := scan(row, data)
    if err != nil { 
        if err == sql.ErrNoRows {
            return nil, nil
        } 
        return nil, err
    }   
    return data, nil
}
{{- end}}

{{- /* FirstOrder function */ -}}
{{- define "func_first_order"}}
{{- $model := title .Table.Name}}
{{- $storage := pascal (print "Storage")}}  
// FirstOrder , find first {{$model}} record matching with condition specified by query and args, and ordered.
func (s *{{$storage}}) FirstOrder(ctx context.Context, query, order string, args ...interface{}) (*{{$model}}, error) {  
    q := s.pickQueryable(ctx)
    stmt := fmt.Sprintf(`%s WHERE %s ORDER BY %s LIMIT 1`, selectQuery(), query, order) 
    row := q.QueryRowContext(ctx, stmt, args...)  

    data := &{{$model}}{}  
    err := scan(row, data)
    if err != nil { 
        if err == sql.ErrNoRows {
            return nil, nil
        } 
        return nil, err
    }   
    return data, nil
}
{{- end}}

{{- /* Where function */ -}}
{{- define "func_where"}}
{{- $model := title .Table.Name}}
{{- $storage := pascal (print "Storage")}}   
// Where , find all {{$model}} records matching with condition specified by query and args.
func (s *{{$storage}}) Where(ctx context.Context, query string, args ...interface{}) ([]*{{$model}}, error) {  
    q := s.pickQueryable(ctx)
    stmt := fmt.Sprintf(`%s WHERE (%s) AND %s`, selectQuery(), query, defaultFilter())
    rows, err := q.QueryContext(ctx, stmt, args...) 
            
    if err != nil {
        return nil, err
    } 
    defer rows.Close()
    return scanRows(rows)
}
{{- end}}

{{- /* WhereOrder function */ -}}
{{- define "func_where_order"}}
{{- $model := title .Table.Name}}
{{- $storage := pascal (print "Storage")}}   
// WhereOrder , find all {{$model}} records matching with condition specified by query and args.
func (s *{{$storage}}) WhereOrder(ctx context.Context, query, order string, args ...interface{}) ([]*{{$model}}, error) {  
    q := s.pickQueryable(ctx)
    stmt := fmt.Sprintf(`%s WHERE (%s) AND %s ORDER BY %s`, selectQuery(), query, defaultFilter(), order)
    rows, err := q.QueryContext(ctx, stmt, args...) 
            
    if err != nil {
        return nil, err
    } 
    defer rows.Close()
    return scanRows(rows)
}
{{- end}}


{{- /* WhereWithPaging function */ -}}
{{- define "func_where_with_paging"}}
{{- $model := title .Table.Name}}
{{- $storage := pascal (print "Storage")}}   
// WhereWithPaging , find all {{$model}} records matching with condition specified by query and args limiting the result specified by size
// when size has value less than 1, the function will use default value 20 for size.
// when page has value less than 1, the function will use default value 1 for page. page has base index 1
func (s *{{$storage}}) WhereWithPaging(ctx context.Context, page, size int,  query, order string, args ...interface{}) ([]*{{$model}}, error) {  
    q := s.pickQueryable(ctx)
    limit := size 
    if limit < 1{
        limit = 20
    } 
    offset := page
    if offset < 1 {
        offset = 1
    }
    offset = (offset - 1) * limit
    stmt := fmt.Sprintf(`%s WHERE (%s) AND %s ORDER BY %s LIMIT %v OFFSET %v`, selectQuery(), query, defaultFilter(), order, limit, offset)
    rows, err := q.QueryContext(ctx, stmt, args...) 
            
    if err != nil {
        return nil, err
    } 
    defer rows.Close()
    return scanRows(rows)
}
{{- end}}

{{- /* WhereNoFilter function */ -}}
{{- define "func_where_no_filter"}}
{{- $model := title .Table.Name}}
{{- $storage := pascal (print "Storage")}}   
// WhereNoFilter , find all {{$model}} records matching with condition specified by query and args.
func (s *{{$storage}}) WhereNoFilter(ctx context.Context, query string, args ...interface{}) ([]*{{$model}}, error) {  
    q := s.pickQueryable(ctx)
    stmt := fmt.Sprintf(`%s WHERE %s`, selectQuery(), query)
    rows, err := q.QueryContext(ctx, stmt, args...) 
            
    if err != nil {
        return nil, err
    } 
    defer rows.Close()
    return scanRows(rows)
}
{{- end}}

{{- /* FindAll function */ -}}
{{- define "func_find_all"}}
{{- $model := title .Table.Name}}
{{- $storage := pascal (print "Storage")}}  
// FindAll , find all {{$model}} records.
func (s *{{$storage}}) FindAll(ctx context.Context) ([]*{{$model}}, error) { 
    q := s.pickQueryable(ctx)
    stmt := fmt.Sprintf(`%s WHERE %s`, selectQuery(), defaultFilter())
    rows, err := q.QueryContext(ctx, stmt) 
            
    if err != nil {
        return nil, err
    } 
    defer rows.Close() 
    return scanRows(rows)
}
{{- end}}

{{- /* FindByKeys function */ -}}
{{- define "func_find_by_keys"}}
{{- $model := title .Table.Name}}
{{- $storage := pascal (print "Storage")}}  
// FindByKeys , find {{$model}} using it's primary key(s).
func (s *{{$storage}}) FindByKeys(ctx context.Context, {{template "pk_parameters" .Table}}) (*{{$model}}, error) { 
    criteria := `{{range $index, $pk := .Table.PrimaryKeys -}}
                    {{- if $index -}} AND {{- end -}}
                    "{{$pk.Name}}" = ${{sum $index 1 -}} 
                 {{end}}`
    stmt := fmt.Sprintf(`(%s) AND %s`, criteria, defaultFilter())
    return s.Single(ctx,stmt, {{- range $index, $pk := .Table.PrimaryKeys}}
                                    {{- if $index}},{{end -}}
                                    {{- printf "%v" (camel $pk.Name)}} 
                                {{- end}})
}
{{- end}}

{{- /* FindByKeysNoFilter function */ -}}
{{- define "func_find_by_keys_no_filter"}}
{{- $model := title .Table.Name}}
{{- $storage := pascal (print "Storage")}}  
// FindByKeysNoFilter , find {{$model}} using it's primary key(s) without filter.
func (s *{{$storage}}) FindByKeysNoFilter(ctx context.Context, {{template "pk_parameters" .Table}}) (*{{$model}}, error) { 
    criteria := `{{range $index, $pk := .Table.PrimaryKeys -}}
                    {{- if $index -}} AND {{- end -}}
                    "{{$pk.Name}}" = ${{sum $index 1 -}} 
                 {{end}}` 
    return s.Single(ctx, criteria, {{- range $index, $pk := .Table.PrimaryKeys}}
                                    {{- if $index}},{{end -}}
                                    {{- printf "%v" (camel $pk.Name)}} 
                                {{- end}})
}
{{- end}}

{{- /* Create function */ -}}
{{- define "func_create"}}
{{- $model := title .Table.Name}}
{{- $storage := pascal (print "Storage")}}  
{{- $parameter := print "p"}}
// Create , create new {{$model}} record.
func (s *{{$storage}}) Create(ctx context.Context, {{$parameter}} *{{$model}}) error {     
    q := s.pickQueryable(ctx)

    {{- if or .Params.fieldCreatedAt .Params.fieldModifiedAt }}  
        now := time.Now().UTC() 
        {{- if .Params.fieldCreatedAt }}  
        {{$parameter}}.{{pascal .Params.fieldCreatedAt}} = now 
        {{- end}}
        
        {{- if .Params.fieldModifiedAt }}  
        {{$parameter}}.{{pascal .Params.fieldModifiedAt}} = now 
        {{- end}}
    {{- end}} 

    stmt, args := InsertQuery({{$parameter}}) 
    row := q.QueryRowContext(ctx, stmt, args...)  
    return scan(row, {{$parameter}})  
}
{{- end}}  

{{- /* Update function */ -}}
{{- define "func_update"}}
{{- $model := title .Table.Name}}
{{- $storage := pascal (print "Storage")}}  
{{- $parameter := print "p"}}

{{- $ignores :=printf "%v" .Params.ignoreFields}}
{{- $ignores := fields (sliceString $ignores 1 (sub (len $ignores) 1))}}  
{{- $excludes := fields (printf "%v %v %v %v"  (join $ignores " ") (join .Table.PrimaryKeys.DBNames " ") .Params.fieldCreatedAt .Params.fieldModifiedAt )}}   
{{- $columns := .Table.Columns.DBNames.Except $excludes}}
// Update , update {{$model}} record.
func (s *{{$storage}}) Update(ctx context.Context, {{$parameter}} *{{$model}}) error {
    q := s.pickQueryable(ctx)
    record, err := s.FindByKeys(ctx, 
        {{ range $index, $col := .Table.PrimaryKeys -}} 
            {{$parameter}}.{{pascal $col.Name -}}
            {{if lt $index (len .Table.Columns) }}, {{end}}
        {{end}}
    )
    if err != nil {
        return err
    }
    if record == nil {
        return errors.New("record not found")
    }
    
    {{- range $index, $column := $columns }}    
    {{ printf "record.%s = %s.%s" (pascal $column) $parameter (pascal $column)}} 
    {{- end }}
 
    {{- if .Params.fieldModifiedAt }}  
        now := time.Now().UTC()
        {{- if .Params.fieldModifiedAt }}  
        record.{{pascal .Params.fieldModifiedAt}} = now 
        {{- end}}
    {{- end}}  

    stmt, args := UpdateQuery(record) 
    row := q.QueryRowContext(ctx, stmt, args...) 
    return scan(row, {{$parameter}})
} 
{{- end -}} 


{{- /* Delete function */ -}}
{{- define "func_delete"}}
{{- $model := title .Table.Name}}
{{- $storage := pascal (print "Storage")}}   
{{- if .Params.fieldDeletedAt}}
// Delete , delete {{$model}} using it's primary key(s).
func (s *{{$storage}}) Delete(ctx context.Context, {{template "pk_parameters" .Table}}) error { 
    q := s.pickQueryable(ctx)
    stmt, args := deleteQuery(  {{- range $index, $pk := .Table.PrimaryKeys}}
                                    {{- if $index}},{{end -}}
                                    {{- printf "%v" (camel $pk.Name)}} 
                                {{- end}})
    result, err := q.ExecContext(ctx, stmt, args...) 

    if err != nil {
        return err
    }
	count, err := result.RowsAffected()
	if err != nil {
		return err
	} else if count < 1 {
		return errors.New("Delete operation expecting affected rows greater than 0")
	}
    return nil 
}
{{end}}
{{- end }}

{{- /* Save function */ -}}
{{- define "func_save"}}
{{- $model := title .Table.Name}} 
{{- $storage := "Storage"}} 
{{- $parameter := print "p" -}}
// Save , create new {{$model}} if it doesn't exist or update if exists.
func (s *{{$storage}}) Save(ctx context.Context, {{$parameter}} *{{$model}}) error {
    record, err := s.FindByKeys(ctx, 
        {{ range $index, $col := .Table.PrimaryKeys -}} 
            {{$parameter}}.{{pascal $col.Name -}}
            {{if lt $index (len .Table.Columns) }}, {{end}}
        {{end}}
    )
    if err != nil {
        return err
    } 
    if record != nil {
        return s.Update(ctx, {{$parameter}}) 
    } 
    return s.Create(ctx, {{$parameter}}) 
} 
{{- end }}

func (s *{{$storage}}) pickQueryable(ctx context.Context) storage.Queryable {    
    q, ok := storage.QueryableFromContext(ctx)
    if !ok {
        q = s.q  
    }
    return q
}

{{- /*
template for functions that require pk parameters e.g: FindByKeys, Delete
ex: PK1 int, PK2 string, PK3 string
*/ -}}
{{- define "pk_parameters"}}
    {{- range $index, $pk := .PrimaryKeys}}
        {{- if $index}},{{end -}}
          {{- printf "%v %v" (camel $pk.Name) $pk.Type}} 
    {{- end}}
{{- end}}

{{- $ignores :=printf "%v" .Params.ignoreFields}}
{{- $ignores := fields (sliceString $ignores 1 (sub (len $ignores) 1))}} 
{{- $columns := .Table.Columns.DBNames.Except $ignores }} 
func fields() string {
    return `{{join ($columns.Sprintf `"%s"`) ", "}}`
}

func selectQuery() string {
    return fmt.Sprintf(`SELECT %s FROM "{{.Table.Name}}"`, fields())
} 
 
{{ $model := title .Table.Name}}
{{- $generatedPK := .Params.generatedPK}}
{{- $ignores :=printf "%v" .Params.ignoreFields}}
{{- $ignores := fields (sliceString $ignores 1 (sub (len $ignores) 1))}}  
{{- $excludes := fields (printf "%v %v"  (join $ignores " "))}}  
{{- $columns := .Table.Columns.DBNames.Except $excludes }}
{{- $placeholders := (numbers 1 (len $columns)).Sprintf "$%s"}}
{{- $DBCols := .Table.Columns -}}    
// InsertQuery returns query statement and slice of arguments 
func InsertQuery(data *{{$model}}) (string, []interface{}) {
    o := []string{
    {{- range $index, $col := $columns}}
    {{- range $i, $dbcol := $DBCols -}}
        {{- if eq $col $dbcol.DBName}}
            {{- if or (not $dbcol.IsPrimaryKey) (and $dbcol.IsPrimaryKey (not $generatedPK)) }}
                "{{$col}}",
            {{- end -}}
        {{- end -}}
    {{- end -}}
    {{end}}
    }
    m:= map[string]interface{}{
    {{- range $index, $col := $columns}}
        {{- range $i, $dbcol := $DBCols -}}
            {{- if eq $col $dbcol.DBName}}
                {{- if or (not $dbcol.IsPrimaryKey) (and $dbcol.IsPrimaryKey (not $generatedPK)) }}
                     "{{$col}}" : data.{{pascal $col}}, 
                {{- end -}} 
            {{- end -}}
        {{- end -}}
    {{end}}
    } 
    
	fs, ph := func(v map[string]interface{}) ([]string, []string) {
		fs := []string{}
		ph := []string{}
		for i, k := range o {
			fs = append(fs, fmt.Sprintf(`"%s"`, k))
			ph = append(ph, fmt.Sprintf(`$%d`, i+1))
		}
		return fs, ph
	}(m)
	args := func(v map[string]interface{}) []interface{} {
		args := []interface{}{}
		for _, k := range o {
			v := v[k]
			args = append(args, v)
		}
		return args
	}(m)

	return fmt.Sprintf(`
        INSERT INTO "{{.Table.Name}}" (%s) 
        VALUES 
            (%s)
        RETURNING %s`, strings.Join(fs, ","), strings.Join(ph, ","), fields()), args
}
 
{{- $model := title .Table.Name}}   
{{- $ignores :=printf "%v" .Params.ignoreFields}}
{{- $ignores := fields (sliceString $ignores 1 (sub (len $ignores) 1))}} 
{{- $columns := (.Table.Columns.DBNames.Except .Table.PrimaryKeys.DBNames).Except $ignores }}
{{- $params := fields (printf "%v %v" (join $columns " ") (join .Table.PrimaryKeys.Names " "))}} 
// UpdateQuery returns query statement and slice of arguments
func UpdateQuery(data *{{$model}}) (string, []interface{}) {
    return fmt.Sprintf(`
        UPDATE "{{.Table.Name}}"
        SET 
            {{- range $index, $column := $columns}}   
            {{- if $index}} ,{{end}} 
            "{{$column}}" = ${{sum $index 1 -}}  
            {{end}}
        WHERE 
            {{ range $index, $pk := .Table.PrimaryKeys -}}
            {{if $index -}} AND {{- end -}}
            "{{$pk.Name}}" = ${{sum (len $columns) $index 1 -}} 
            {{end}}
        RETURNING %s`, fields()), 
        []interface{}{
        {{- range $index, $column := $params}}   
            {{- if $index -}}, {{end -}} 
            data.{{pascal $column}}
        {{- end -}}
        }
}

{{- $params := fields (printf "%s %v" "now" (join .Table.PrimaryKeys.Names " "))}}
{{if .Params.fieldDeletedAt}}
func deleteQuery({{template "pk_parameters" .Table}}) (string, []interface{}) {
    now := time.Now().UTC() 
    return `
        UPDATE "{{.Table.Name}}"
        SET  
            "{{.Params.fieldDeletedAt}}" = $1
        WHERE 
            {{ range $index, $pk := .Table.PrimaryKeys -}}
            {{if $index -}} AND {{- end -}}
            "{{$pk.Name}}" = ${{sum (len .Table.PrimaryKeys) $index 1 -}} 
            {{end}}`, 
        []interface{}{
            {{- range $index, $column := $params}}   
            {{- if $index -}}, {{end -}} 
            {{camel $column}}
            {{- end -}}
        }
} 
{{- end}}

func defaultFilter() string {
    {{- if .Params.fieldDeletedAt}}
    return `"{{.Params.fieldDeletedAt}}" is NULL`
    {{- else -}}
    return `true`
    {{end -}}
}

{{ $ignores :=printf "%v" .Params.ignoreFields}}
{{- $ignores := fields (sliceString $ignores 1 (sub (len $ignores) 1))}} 
{{- $columns := .Table.Columns.DBNames.Except $ignores }} 
{{- $DBCols := .Table.Columns }} 
func scan(scanner rowScanner, data *{{$model}}) error { 
    {{- range $index, $col := $columns -}}  
        {{- range $i, $coldb := $DBCols -}}
        {{- if eq $col $coldb.DBName -}}
            var i{{pascal $col}} {{if $coldb.Nullable}}*{{end}}{{if $coldb.UserDefined}}{{replace (toLower $coldb.DBType) "_" "" -1}}.{{replace (pascal $coldb.DBType) "_" "" -1}}{{else}}{{$coldb.Type}}{{end}}            
            {{- end}}
        {{- end}}
    {{end}}
    err:= scanner.Scan( 
            {{- range $index, $col := $columns -}}  
                &i{{pascal $col -}}
                {{if lt $index (len $columns) -}}, {{end -}}
            {{end}}
        )
    if err!= nil {
        return err
    }

    {{ range $index, $col := $columns -}}  
        {{- range $i, $coldb := $DBCols -}}
        {{- if eq $col $coldb.DBName -}}
            {{- if $coldb.Nullable -}}
            if i{{pascal $col}} != nil {
                data.{{pascal $col}} = *i{{pascal $col}}   
            }
            {{- else -}}    
                data.{{pascal $col}} = i{{pascal $col}}  
            {{- end -}}
        {{- end}}
        {{- end}}
    {{end}}
    return nil
}

func scanRows(rows rowsResult) ([]*{{$model}}, error) {
    collection := []*{{$model}}{}
    for rows.Next() {  
        data:= &{{$model}}{}
        err := scan(rows, data)
        if err != nil {
            return nil, err
        } 
        collection = append(collection, data) 
    } 
    return collection, nil 
}